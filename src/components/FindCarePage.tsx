
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { 
  MapPin, 
  Phone, 
  Mail, 
  Star, 
  Heart, 
  Shield, 
  Clock,
  DollarSign,
  Users,
  Accessibility,
  Home,
  Building
} from 'lucide-react';

const FindCarePage = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    location: '',
    careType: '',
    budget: '',
    timeline: '',
    specialNeeds: [],
    veteranStatus: false
  });

  // Mock facility data (would be generated by AVA/SerpAPI in production)
  const mockFacilities = [
    {
      id: 1,
      name: "Sunset Manor Senior Living",
      type: "Assisted Living",
      rating: 4.8,
      reviews: 127,
      address: "1234 Oak Street, Austin, TX 78701",
      phone: "(512) 555-0123",
      email: "info@sunsetmanor.com",
      price: "$3,200 - $4,800/month",
      features: ["Memory Care", "24/7 Nursing", "Veteran Friendly", "Pet Friendly"],
      image: "/api/placeholder/300/200",
      description: "A warm, homelike environment providing personalized care for seniors with dignity and respect."
    },
    {
      id: 2,
      name: "Heritage Gardens Care Center",
      type: "Memory Care",
      rating: 4.6,
      reviews: 89,
      address: "5678 Pine Avenue, Austin, TX 78704",
      phone: "(512) 555-0456",
      email: "contact@heritagegardens.com",
      price: "$4,500 - $6,200/month",
      features: ["Specialized Memory Care", "Secure Environment", "Music Therapy", "Family Support"],
      image: "/api/placeholder/300/200",
      description: "Specialized memory care with innovative programs designed for residents with Alzheimer's and dementia."
    },
    {
      id: 3,
      name: "Veterans' Haven Residence",
      type: "Independent Living",
      rating: 4.9,
      reviews: 156,
      address: "9012 Military Drive, Austin, TX 78745",
      phone: "(512) 555-0789",
      email: "welcome@veteranshaven.com",
      price: "$2,800 - $3,900/month",
      features: ["VA Benefits Accepted", "Veteran Community", "Transportation", "Fitness Center"],
      image: "/api/placeholder/300/200",
      description: "Exclusively serving our nation's heroes with honor, respect, and comprehensive veteran-focused care."
    }
  ];

  const careTypes = [
    "Independent Living",
    "Assisted Living", 
    "Memory Care",
    "Skilled Nursing",
    "Continuing Care Retirement Community (CCRC)",
    "Adult Day Care",
    "Home Care"
  ];

  const specialNeedsOptions = [
    "Wheelchair Accessibility",
    "Diabetes Management",
    "Heart Condition Care",
    "Memory/Dementia Care",
    "Medication Management",
    "Physical Therapy",
    "Occupational Therapy",
    "Speech Therapy"
  ];

  const handleNext = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSpecialNeedToggle = (need: string) => {
    setFormData(prev => ({
      ...prev,
      specialNeeds: prev.specialNeeds.includes(need)
        ? prev.specialNeeds.filter(n => n !== need)
        : [...prev.specialNeeds, need]
    }));
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div>
        <Label htmlFor="location" className="text-lg font-semibold text-text-primary">
          Where are you looking for care?
        </Label>
        <Input
          id="location"
          placeholder="Enter city, state, or ZIP code"
          value={formData.location}
          onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
          className="mt-2"
        />
      </div>

      <div>
        <Label className="text-lg font-semibold text-text-primary">
          What type of care do you need?
        </Label>
        <Select value={formData.careType} onValueChange={(value) => setFormData(prev => ({ ...prev, careType: value }))}>
          <SelectTrigger className="mt-2">
            <SelectValue placeholder="Select care type" />
          </SelectTrigger>
          <SelectContent>
            {careTypes.map((type) => (
              <SelectItem key={type} value={type}>{type}</SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="flex items-center space-x-2">
        <Checkbox
          id="veteran"
          checked={formData.veteranStatus}
          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, veteranStatus: !!checked }))}
        />
        <Label htmlFor="veteran" className="text-text-primary">
          I am a veteran or looking for veteran-specific care
        </Label>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div>
        <Label className="text-lg font-semibold text-text-primary">
          What's your budget range?
        </Label>
        <Select value={formData.budget} onValueChange={(value) => setFormData(prev => ({ ...prev, budget: value }))}>
          <SelectTrigger className="mt-2">
            <SelectValue placeholder="Select budget range" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="under-2000">Under $2,000/month</SelectItem>
            <SelectItem value="2000-3500">$2,000 - $3,500/month</SelectItem>
            <SelectItem value="3500-5000">$3,500 - $5,000/month</SelectItem>
            <SelectItem value="5000-7000">$5,000 - $7,000/month</SelectItem>
            <SelectItem value="over-7000">Over $7,000/month</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div>
        <Label className="text-lg font-semibold text-text-primary">
          When do you need care to start?
        </Label>
        <Select value={formData.timeline} onValueChange={(value) => setFormData(prev => ({ ...prev, timeline: value }))}>
          <SelectTrigger className="mt-2">
            <SelectValue placeholder="Select timeline" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="immediate">Immediately</SelectItem>
            <SelectItem value="within-month">Within 1 month</SelectItem>
            <SelectItem value="1-3-months">1-3 months</SelectItem>
            <SelectItem value="3-6-months">3-6 months</SelectItem>
            <SelectItem value="planning">Just planning ahead</SelectItem>
          </SelectContent>
        </Select>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div>
        <Label className="text-lg font-semibold text-text-primary mb-4 block">
          Do you have any special care needs? (Select all that apply)
        </Label>
        <div className="grid grid-cols-2 gap-4">
          {specialNeedsOptions.map((need) => (
            <div key={need} className="flex items-center space-x-2">
              <Checkbox
                id={need}
                checked={formData.specialNeeds.includes(need)}
                onCheckedChange={() => handleSpecialNeedToggle(need)}
              />
              <Label htmlFor={need} className="text-sm text-text-primary">
                {need}
              </Label>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  if (currentStep === 4) {
    return (
      <div className="min-h-screen pt-24 pb-16 bg-surface-soft">
        <div className="container mx-auto px-4">
          {/* Results Header */}
          <div className="text-center mb-12">
            <h1 className="text-3xl md:text-4xl font-bold text-text-primary mb-4">
              Your Perfect Matches
            </h1>
            <p className="text-xl text-text-secondary">
              Based on your preferences, AVA found these highly rated facilities in your area.
            </p>
          </div>

          {/* Facility Results */}
          <div className="space-y-8">
            {mockFacilities.map((facility) => (
              <Card key={facility.id} className="glass-card hover:shadow-xl transition-shadow duration-300">
                <CardContent className="p-6">
                  <div className="grid md:grid-cols-3 gap-6">
                    {/* Facility Image */}
                    <div className="relative">
                      <img
                        src={facility.image}
                        alt={facility.name}
                        className="w-full h-48 object-cover rounded-lg"
                      />
                      <Badge className="absolute top-2 left-2 bg-primary-bright text-white">
                        {facility.type}
                      </Badge>
                    </div>

                    {/* Facility Details */}
                    <div className="md:col-span-2 space-y-4">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="text-2xl font-bold text-text-primary mb-2">
                            {facility.name}
                          </h3>
                          <div className="flex items-center space-x-2 mb-2">
                            <div className="flex items-center">
                              {[...Array(5)].map((_, i) => (
                                <Star
                                  key={i}
                                  className={`h-4 w-4 ${
                                    i < Math.floor(facility.rating)
                                      ? 'text-warning fill-current'
                                      : 'text-gray-300'
                                  }`}
                                />
                              ))}
                            </div>
                            <span className="text-sm text-text-secondary">
                              {facility.rating} ({facility.reviews} reviews)
                            </span>
                          </div>
                          <div className="flex items-center text-text-secondary mb-2">
                            <MapPin className="h-4 w-4 mr-1" />
                            {facility.address}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-2xl font-bold text-primary-bright">
                            {facility.price}
                          </div>
                        </div>
                      </div>

                      <p className="text-text-secondary">{facility.description}</p>

                      {/* Features */}
                      <div className="flex flex-wrap gap-2">
                        {facility.features.map((feature, index) => (
                          <Badge key={index} variant="outline" className="border-primary-bright text-primary-bright">
                            {feature}
                          </Badge>
                        ))}
                      </div>

                      {/* Action Buttons */}
                      <div className="flex flex-wrap gap-3 pt-4">
                        <Button className="bg-primary-bright hover:bg-primary-dark">
                          <Phone className="h-4 w-4 mr-2" />
                          Call Now
                        </Button>
                        <Button variant="outline">
                          <Mail className="h-4 w-4 mr-2" />
                          Send Message
                        </Button>
                        <Button variant="outline">
                          <Heart className="h-4 w-4 mr-2" />
                          Save
                        </Button>
                        <Button variant="outline">
                          Schedule Tour
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Call to Action */}
          <div className="text-center mt-12">
            <Card className="glass-card max-w-2xl mx-auto">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold text-text-primary mb-4">
                  Need help choosing the right facility?
                </h3>
                <p className="text-text-secondary mb-6">
                  Schedule a free consultation with one of our care placement experts 
                  to discuss your options in detail.
                </p>
                <Button size="lg" className="bg-accent-patriotic hover:bg-accent-patriotic/90">
                  Schedule Free Consultation
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-24 pb-16 bg-surface-soft">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          {/* AVA Bot Box */}
          <Card className="glass-card mb-8 border-primary-bright/20">
            <CardContent className="p-6">
              <div className="flex items-start space-x-4">
                <div className="w-12 h-12 rounded-full bg-primary-bright flex items-center justify-center flex-shrink-0">
                  <img 
                    src="/lovable-uploads/3313fb44-68a6-4a0a-bd78-1fb211a5fe2f.png" 
                    alt="AVA" 
                    className="w-10 h-10 rounded-full object-cover"
                  />
                </div>
                <div className="flex-grow">
                  <h3 className="font-semibold text-text-primary mb-2">AVA Assistant</h3>
                  <p className="text-text-secondary">
                    Hi! I'm AVA, your AI-powered care placement assistant. I'll help you find the perfect senior care facility 
                    by asking a few simple questions about your needs and preferences. This should only take a few minutes, 
                    and I'll provide you with personalized recommendations based on your answers.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-text-secondary">Step {currentStep} of 3</span>
              <span className="text-sm text-text-secondary">{Math.round((currentStep / 3) * 100)}% Complete</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-primary-bright h-2 rounded-full transition-all duration-300"
                style={{ width: `${(currentStep / 3) * 100}%` }}
              ></div>
            </div>
          </div>

          {/* Form Card */}
          <Card className="glass-card">
            <CardHeader>
              <CardTitle className="text-2xl text-text-primary">
                {currentStep === 1 && "Let's start with the basics"}
                {currentStep === 2 && "Tell us about your preferences"}
                {currentStep === 3 && "Any special requirements?"}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              {currentStep === 1 && renderStep1()}
              {currentStep === 2 && renderStep2()}
              {currentStep === 3 && renderStep3()}

              {/* Navigation Buttons */}
              <div className="flex justify-between pt-8">
                <Button
                  variant="outline"
                  onClick={handlePrevious}
                  disabled={currentStep === 1}
                >
                  Previous
                </Button>
                <Button
                  onClick={currentStep === 3 ? () => setCurrentStep(4) : handleNext}
                  className="bg-primary-bright hover:bg-primary-dark"
                >
                  {currentStep === 3 ? 'Find My Matches' : 'Next'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default FindCarePage;
